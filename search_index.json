[
["index.html", "A guide to writing an iGEM Wiki Chapter 1 Preface", " A guide to writing an iGEM Wiki William Kwok 2017-11-16 Chapter 1 Preface Writing an iGEM wiki will be undoubtably one of the most frustrating things every team has to face. Some teams have members that have never touched an ounce of HTML, while some others have members dedicated to writing a wiki. Regardless, there are many obstacles that will be faced in the process of making a wiki whether you are a novice or professional at programming on the client-side. We have compiled a list of important things to know before you start going with your wiki. This book assumes you have some knowledge of programming in HTML, CSS, and JavaScript (optional). Additionally, this book will also teach those on the Washington iGEM team how to work with the JavaScript created from the previous years’ wiki. This message will self-destruct if we make this tutorial public for the rest of iGEM. "],
["addPage.html", "Chapter 2 Creating/editing wiki pages 2.1 Wiki pages structure 2.2 Judged pages 2.3 Creating a new blank page", " Chapter 2 Creating/editing wiki pages Before we can make a wiki, we have to know how to do basic edits to a page. You’d be surprised at how many things require special attention to modify on the wiki. If you’ve ever made your own website before, you may have had to just upload all the relevant files and immediately have a website that you could use. iGEM’s uses MediaWiki, which requires you to type in the HTML for every individual page. Controversially, a lot of web programmers dislike this model, because it increases complexity if they want to do complex stuff. However, note that using MediaWiki is a godsend for some teams that don’t have any knowledge of web programming. That is why there will likely be no change to this structure for years to come. For any demonstrations, all demonstration pages will use a page from Team:Washington’s iGEM Wiki. We will also be using Google Chrome as a web browser. 2.1 Wiki pages structure The iGEM wiki is structured in a very straightforward manner. http://[YEAR].igem.org/Team:[TEAM] will lead you to the main page. Take note that there is no backslash after this. If you have a backslash, then you will go to a blank uncreated page. There are many special pages that the judges take into consideration for determining what medal you will receive at the Jamboree. These pages can be found here. For example, the Attributions page for your team will follow the structure http://[YEAR].igem.org/Team:[TEAM]/Attributions. Additionally, the human practices pages are a bit funky, but they follow the same structure, they just have a /HP/ before them. You shouldn’t think about this as if it was a file pathway, but rather a page with the page title /HP/Gold_Integrated or so. 2.2 Judged pages All the special pages noted in section 2.1 will be an existing page for you to work on. It looks something like the following: Existing Page For these pages, you simply have to follow these steps to modify the page: Be logged in and make sure you are in your team registry (otherwise you won’t be allowed to edit the pages) Go to the top bar and find wiki tools Hover over that and go to edit page Modify the page as you like (Read below for more tips) Click save, and the page will be updated Note how there is a blue bordered ALERT box on this page. If you want to be evaluated for this award, you will have to remove (before a certain date) the div that houses this alert message. The code that you have to remove will look something like this: &lt;div class=&quot;column full_size judges-will-not-evaluate&quot;&gt; &lt;h3&gt;★ ALERT! &lt;/h3&gt; &lt;p&gt;This page is used by the judges to evaluate your team for the &lt;a href=&quot;http://2017.igem.org/Judging/Medals&quot;&gt;medal criterion&lt;/a&gt; or &lt;a href=&quot;http://2017.igem.org/Judging/Awards&quot;&gt; award listed above&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; Delete this box in order to be evaluated for this medal criterion and/or award. See more information at &lt;a href=&quot;http://2017.igem.org/Judging/Pages_for_Awards&quot;&gt; Instructions for Pages for awards&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; Remove all of the above code if you want to be considered for the award. 2.3 Creating a new blank page Creating a new page is very simple. First, type this into the navigation bar: http://[YEAR].igem.org/Team:[TEAM]/[PAGE_YOU_WANT_TO_MAKE]. In the next example, We will be creating a new page NewPageTest. First, we head to http://2017.igem.org/Team:Washington/NewPageTest We should see something like this: Go click on edit this page or go to wiki tools &gt; edit Edit your heart out. HTML inside the edit box will appear as rendered HTML after saving. "],
["tcj.html", "Chapter 3 Templates, CSS, and JavaScript 3.1 Making a template for code 3.2 Including JavaScript and CSS 3.3 Using templates to put them all together 3.4 Overriding iGEM CSS 3.5 Clearing cache", " Chapter 3 Templates, CSS, and JavaScript 3.1 Making a template for code A template is a page you can use for many things. These templates can contain HTML or even just plaintext code. The advantage of having these templates is that you can basically source in everything from a template into a regular page. To create a template page, it is the exact same as making a blank page from 2.3. You wouldn’t know the difference. To get to a template page, you use the format http://[YEAR].igem.org/Template:[TEAM]/[TEMPLATE]. To use the template in your actual page, you use {{[TEAM]/[TEMPLATE]}} So for example, here are the steps to making a template page and including it into a regular page: Going to a blank template page: http://2017.igem.org/Template:Washington/TestPage Now let us just add a simple &lt;html&gt;&lt;strong&gt;Testinput&lt;/strong&gt;&lt;/html&gt; to the page, which should output a bolded “Testinput” onto an almost blank page To include this onto the NewPageTest that we made in 2.3, we edit the page and simply type {{Washington/TestPage}}. We find that NewPageTest now looks exactly like the TestPage template. Don’t worry about the page still having “Team:Washington” or the iGEM logos on it. Read on to learn how to get rid of these. 3.2 Including JavaScript and CSS Now that you have a grasp of how templates work, you can simply copy paste your CSS or JavaScript directly into a blank template, and click save. HOWEVER, there is a very niche way to get the code from the template correctly and incorporate it into your page. You may find major errors if you just wrap the code in &lt;style&gt; or &lt;script&gt; tags. (One example is that MediaWiki does not parse the &amp; symbol correctly, so if you have &amp;&amp; anywhere in the code, it will break. This is crucial for using jQuery or Bootstrap API) The correct way to incorporate code: Take your template link: http://[YEAR].igem.org/Template:[TEAM]/[TEMPLATE] Add ?action=raw&amp;ctype=text/[CSS OR JAVASCRIPT] where [CSS OR JAVASCRIPT] is css or javascript depending on what type of code is in the template. Incorporate it into an actual page with script or style tags like so: &lt;link href=&quot;http://[YEAR].igem.org/Template:[TEAM]/[TEMPLATE]?action=raw&amp;ctype=text/css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; /&gt; or &lt;script src=&quot;http://[YEAR].igem.org/Template:[TEAM]/[TEMPLATE]?action=raw&amp;ctype=text/javascript&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; Those two lines of code provided at the end of those steps will act exactly like incorporating a local JavaScript/CSS file or using a CDN. 3.3 Using templates to put them all together You don’t have to follow this guide entirely, but what we’ve been doing with our wiki is putting all the stuff you’d normally put in the header of an HTML page into a template, so that way all we would have to do is put in the template caller ({{[TEAM]/[TEMPLATE]}}) and then our body content inside &lt;html&gt;&lt;/html&gt;. Here is an example of what we have in our Template:Includes– you can modify this for any CSS or JavaScript you want to include. &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;Washington iGEM&lt;/title&gt; &lt;!-- &lt;link href=&quot;&quot; type=&quot;image/gif&quot; rel=&quot;shortcut icon&quot; /&gt; --&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#4B2E83&quot;&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;!-- Bootstrap requirements --&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no&quot;&gt; &lt;link href=&quot;http://2017.igem.org/Template:Washington/BootstrapCSS?action=raw&amp;ctype=text/css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;script src=&quot;http://2017.igem.org/Template:Washington/JQuery?action=raw&amp;ctype=text/javascript&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://2017.igem.org/Template:Washington/Popper?action=raw&amp;ctype=text/javascript&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://2017.igem.org/Template:Washington/BootstrapJS?action=raw&amp;ctype=text/javascript&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://2017.igem.org/Template:Washington/ChartJS?action=raw&amp;ctype=text/javascript&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; &lt;!-- Animations --&gt; &lt;link href=&quot;http://2017.igem.org/Template:Washington/Animate?action=raw&amp;ctype=text/css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;!-- Team Washington includings --&gt; &lt;link href=&quot;http://2017.igem.org/Template:Washington/GlobalCSS?action=raw&amp;ctype=text/css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;script src=&quot;http://2017.igem.org/Template:Washington/GlobalJS?action=raw&amp;ctype=text/javascript&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;/html&gt; Then, on a page like the one we made in section 2.3 we have the following code: {{Washington/Includes}} &lt;html&gt; &lt;body&gt; ... &lt;/body&gt; &lt;/html&gt; Even though you have your own CSS and JavaScript on the page doesn’t mean you’re ready yet. Read on to learn about overriding iGEM’s default CSS. 3.4 Overriding iGEM CSS Perhaps one of the most frustrating but important part of working with iGEM’s MediaWiki system is overriding their default CSS. No matter how much you try to override, sometimes there will still be minute bugs due to not overriding part of the code. At the bottom of this section, there is a code that you simply need to copy paste into a new template (3.1) to override a good amount of iGEM CSS. For things that aren’t yet overridden and are causing errors, you will need to: Right click on the element that is bugging up Inspect - This will pop up an inspection window. Under elements you will see a window for HTML, CSS of the selected element, and box model of the selected element. In the above, for example, let’s say we want to delete this from showing. In a custom CSS Template (3.1) we override the class by putting the same class name. #top_title { display: none; width: 0px; } The final step will require the most problem solving skills to figure out what is being overridden. It takes time to get a feel for what exactly is wrong. Thankfully, you’ll encounter this problem the least with the following override code: #sideMenu, #top_title { display: none; width: 0px; } #bodyContent a[href ^=&quot;https://&quot;], .link-https { padding-right: 0px; } #content { width: 100%; padding: 0px; border: none; color: black; margin-left: auto; margin-right: auto; background-color: #fff; position: relative; } #globalWrapper { padding-bottom: 0; font-size: 100%; } #top_menu_under { height: 0px; } #top_menu_14 { height: 22px; } #HQ_page h1, h2, h3, h4, h5 { font-family: INSERTFONT, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-weight: normal; padding: 0px; line-height: normal; } #HQ_page p { font-family: INSERTFONT, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; text-align: left; font-size: 1.25rem; } #top_menu_inside #user_item { float: left; padding-top: 0px; margin-right: none; } #bodyContent a[href ^=&quot;mailto:&quot;], .link-mailto { padding-right: 0px; background: none; } Though, your job isn’t done there. You’ll want to mess around with that code to change what fonts you’re using. 3.5 Clearing cache “Why did the page stay the same???? I updated my CSS and JavaScript but the functionality and looks aren’t changing!” My friend, you’ll want to learn about a magical thing called clearing your cache. The cache is a temporary storage for web browsers that allows the web page to be loaded faster. Things like images, CSS, JavaScript, etc. all get stored in cache so the next time the page is loaded, it will load faster. Easy way to clear cache: You can go to your browser settings and clear the cache, or you can also go to F12 (or right click &gt; inspect) &gt; top right corner 3 dots &gt; settings &gt; scroll down to network &gt; Disable cache (while DevTools is open) Now, whenever you press F12 on your keyboard to bring up the inspect panel, then refresh the page, the cache for the page will instantly be cleared and you will have the latest update of the page. "],
["making-a-bookdown-book.html", "Chapter 4 Making a bookdown book", " Chapter 4 Making a bookdown book "]
]
